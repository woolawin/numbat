// Code generated from Numbat.g4 by ANTLR 4.13.2. DO NOT EDIT.

package parser

import (
	"fmt"
	"github.com/antlr4-go/antlr/v4"
	"sync"
	"unicode"
)

// Suppress unused import error
var _ = fmt.Printf
var _ = sync.Once{}
var _ = unicode.IsLetter

type NumbatLexer struct {
	*antlr.BaseLexer
	channelNames []string
	modeNames    []string
	// TODO: EOF string
}

var NumbatLexerLexerStaticData struct {
	once                   sync.Once
	serializedATN          []int32
	ChannelNames           []string
	ModeNames              []string
	LiteralNames           []string
	SymbolicNames          []string
	RuleNames              []string
	PredictionContextCache *antlr.PredictionContextCache
	atn                    *antlr.ATN
	decisionToDFA          []*antlr.DFA
}

func numbatlexerLexerInit() {
	staticData := &NumbatLexerLexerStaticData
	staticData.ChannelNames = []string{
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	}
	staticData.ModeNames = []string{
		"DEFAULT_MODE",
	}
	staticData.LiteralNames = []string{
		"", "'true'", "'false'", "'null'", "'='", "'('", "','", "')'", "'do'",
		"'end'", "'proc'", "':'", "'var'", "'return'", "'program'",
	}
	staticData.SymbolicNames = []string{
		"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "UNIT",
		"NEWLINE", "NUMBER", "HEX", "STRING", "TYPE_NAME", "NON_TYPE_NAME",
		"WS", "COMMENT", "LINE_COMMENT",
	}
	staticData.RuleNames = []string{
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8",
		"T__9", "T__10", "T__11", "T__12", "T__13", "UNIT_NAME", "UNIT_POWER",
		"UNIT", "NEWLINE", "NUMBER", "HEX", "STRING", "TYPE_NAME", "NON_TYPE_NAME",
		"WS", "COMMENT", "LINE_COMMENT",
	}
	staticData.PredictionContextCache = antlr.NewPredictionContextCache()
	staticData.serializedATN = []int32{
		4, 0, 24, 236, 6, -1, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2,
		4, 7, 4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2,
		10, 7, 10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7, 13, 2, 14, 7, 14, 2, 15,
		7, 15, 2, 16, 7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 7, 19, 2, 20, 7,
		20, 2, 21, 7, 21, 2, 22, 7, 22, 2, 23, 7, 23, 2, 24, 7, 24, 2, 25, 7, 25,
		1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
		1, 2, 1, 2, 1, 2, 1, 2, 1, 3, 1, 3, 1, 4, 1, 4, 1, 5, 1, 5, 1, 6, 1, 6,
		1, 7, 1, 7, 1, 7, 1, 8, 1, 8, 1, 8, 1, 8, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9,
		1, 10, 1, 10, 1, 11, 1, 11, 1, 11, 1, 11, 1, 12, 1, 12, 1, 12, 1, 12, 1,
		12, 1, 12, 1, 12, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13,
		1, 14, 4, 14, 112, 8, 14, 11, 14, 12, 14, 113, 1, 14, 5, 14, 117, 8, 14,
		10, 14, 12, 14, 120, 9, 14, 1, 15, 1, 15, 1, 15, 1, 16, 1, 16, 1, 16, 1,
		16, 1, 16, 3, 16, 130, 8, 16, 1, 16, 1, 16, 1, 16, 3, 16, 135, 8, 16, 3,
		16, 137, 8, 16, 1, 17, 4, 17, 140, 8, 17, 11, 17, 12, 17, 141, 1, 18, 3,
		18, 145, 8, 18, 1, 18, 4, 18, 148, 8, 18, 11, 18, 12, 18, 149, 1, 18, 1,
		18, 4, 18, 154, 8, 18, 11, 18, 12, 18, 155, 3, 18, 158, 8, 18, 1, 18, 1,
		18, 3, 18, 162, 8, 18, 1, 18, 4, 18, 165, 8, 18, 11, 18, 12, 18, 166, 3,
		18, 169, 8, 18, 1, 19, 3, 19, 172, 8, 19, 1, 19, 1, 19, 1, 19, 4, 19, 177,
		8, 19, 11, 19, 12, 19, 178, 1, 20, 1, 20, 1, 20, 1, 20, 5, 20, 185, 8,
		20, 10, 20, 12, 20, 188, 9, 20, 1, 20, 1, 20, 1, 21, 1, 21, 4, 21, 194,
		8, 21, 11, 21, 12, 21, 195, 1, 22, 1, 22, 5, 22, 200, 8, 22, 10, 22, 12,
		22, 203, 9, 22, 1, 23, 4, 23, 206, 8, 23, 11, 23, 12, 23, 207, 1, 23, 1,
		23, 1, 24, 1, 24, 1, 24, 1, 24, 5, 24, 216, 8, 24, 10, 24, 12, 24, 219,
		9, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 25, 1, 25, 1, 25, 1, 25, 5,
		25, 230, 8, 25, 10, 25, 12, 25, 233, 9, 25, 1, 25, 1, 25, 1, 217, 0, 26,
		1, 1, 3, 2, 5, 3, 7, 4, 9, 5, 11, 6, 13, 7, 15, 8, 17, 9, 19, 10, 21, 11,
		23, 12, 25, 13, 27, 14, 29, 0, 31, 0, 33, 15, 35, 16, 37, 17, 39, 18, 41,
		19, 43, 20, 45, 21, 47, 22, 49, 23, 51, 24, 1, 0, 14, 2, 0, 65, 90, 97,
		122, 3, 0, 48, 57, 65, 90, 97, 122, 1, 0, 50, 51, 2, 0, 10, 10, 13, 13,
		1, 0, 48, 57, 1, 0, 101, 101, 2, 0, 43, 43, 45, 45, 1, 0, 120, 120, 2,
		0, 48, 57, 65, 70, 2, 0, 34, 34, 92, 92, 1, 0, 65, 90, 1, 0, 97, 122, 3,
		0, 48, 57, 95, 95, 97, 122, 2, 0, 9, 9, 32, 32, 256, 0, 1, 1, 0, 0, 0,
		0, 3, 1, 0, 0, 0, 0, 5, 1, 0, 0, 0, 0, 7, 1, 0, 0, 0, 0, 9, 1, 0, 0, 0,
		0, 11, 1, 0, 0, 0, 0, 13, 1, 0, 0, 0, 0, 15, 1, 0, 0, 0, 0, 17, 1, 0, 0,
		0, 0, 19, 1, 0, 0, 0, 0, 21, 1, 0, 0, 0, 0, 23, 1, 0, 0, 0, 0, 25, 1, 0,
		0, 0, 0, 27, 1, 0, 0, 0, 0, 33, 1, 0, 0, 0, 0, 35, 1, 0, 0, 0, 0, 37, 1,
		0, 0, 0, 0, 39, 1, 0, 0, 0, 0, 41, 1, 0, 0, 0, 0, 43, 1, 0, 0, 0, 0, 45,
		1, 0, 0, 0, 0, 47, 1, 0, 0, 0, 0, 49, 1, 0, 0, 0, 0, 51, 1, 0, 0, 0, 1,
		53, 1, 0, 0, 0, 3, 58, 1, 0, 0, 0, 5, 64, 1, 0, 0, 0, 7, 69, 1, 0, 0, 0,
		9, 71, 1, 0, 0, 0, 11, 73, 1, 0, 0, 0, 13, 75, 1, 0, 0, 0, 15, 77, 1, 0,
		0, 0, 17, 80, 1, 0, 0, 0, 19, 84, 1, 0, 0, 0, 21, 89, 1, 0, 0, 0, 23, 91,
		1, 0, 0, 0, 25, 95, 1, 0, 0, 0, 27, 102, 1, 0, 0, 0, 29, 111, 1, 0, 0,
		0, 31, 121, 1, 0, 0, 0, 33, 124, 1, 0, 0, 0, 35, 139, 1, 0, 0, 0, 37, 144,
		1, 0, 0, 0, 39, 171, 1, 0, 0, 0, 41, 180, 1, 0, 0, 0, 43, 191, 1, 0, 0,
		0, 45, 197, 1, 0, 0, 0, 47, 205, 1, 0, 0, 0, 49, 211, 1, 0, 0, 0, 51, 225,
		1, 0, 0, 0, 53, 54, 5, 116, 0, 0, 54, 55, 5, 114, 0, 0, 55, 56, 5, 117,
		0, 0, 56, 57, 5, 101, 0, 0, 57, 2, 1, 0, 0, 0, 58, 59, 5, 102, 0, 0, 59,
		60, 5, 97, 0, 0, 60, 61, 5, 108, 0, 0, 61, 62, 5, 115, 0, 0, 62, 63, 5,
		101, 0, 0, 63, 4, 1, 0, 0, 0, 64, 65, 5, 110, 0, 0, 65, 66, 5, 117, 0,
		0, 66, 67, 5, 108, 0, 0, 67, 68, 5, 108, 0, 0, 68, 6, 1, 0, 0, 0, 69, 70,
		5, 61, 0, 0, 70, 8, 1, 0, 0, 0, 71, 72, 5, 40, 0, 0, 72, 10, 1, 0, 0, 0,
		73, 74, 5, 44, 0, 0, 74, 12, 1, 0, 0, 0, 75, 76, 5, 41, 0, 0, 76, 14, 1,
		0, 0, 0, 77, 78, 5, 100, 0, 0, 78, 79, 5, 111, 0, 0, 79, 16, 1, 0, 0, 0,
		80, 81, 5, 101, 0, 0, 81, 82, 5, 110, 0, 0, 82, 83, 5, 100, 0, 0, 83, 18,
		1, 0, 0, 0, 84, 85, 5, 112, 0, 0, 85, 86, 5, 114, 0, 0, 86, 87, 5, 111,
		0, 0, 87, 88, 5, 99, 0, 0, 88, 20, 1, 0, 0, 0, 89, 90, 5, 58, 0, 0, 90,
		22, 1, 0, 0, 0, 91, 92, 5, 118, 0, 0, 92, 93, 5, 97, 0, 0, 93, 94, 5, 114,
		0, 0, 94, 24, 1, 0, 0, 0, 95, 96, 5, 114, 0, 0, 96, 97, 5, 101, 0, 0, 97,
		98, 5, 116, 0, 0, 98, 99, 5, 117, 0, 0, 99, 100, 5, 114, 0, 0, 100, 101,
		5, 110, 0, 0, 101, 26, 1, 0, 0, 0, 102, 103, 5, 112, 0, 0, 103, 104, 5,
		114, 0, 0, 104, 105, 5, 111, 0, 0, 105, 106, 5, 103, 0, 0, 106, 107, 5,
		114, 0, 0, 107, 108, 5, 97, 0, 0, 108, 109, 5, 109, 0, 0, 109, 28, 1, 0,
		0, 0, 110, 112, 7, 0, 0, 0, 111, 110, 1, 0, 0, 0, 112, 113, 1, 0, 0, 0,
		113, 111, 1, 0, 0, 0, 113, 114, 1, 0, 0, 0, 114, 118, 1, 0, 0, 0, 115,
		117, 7, 1, 0, 0, 116, 115, 1, 0, 0, 0, 117, 120, 1, 0, 0, 0, 118, 116,
		1, 0, 0, 0, 118, 119, 1, 0, 0, 0, 119, 30, 1, 0, 0, 0, 120, 118, 1, 0,
		0, 0, 121, 122, 5, 94, 0, 0, 122, 123, 7, 2, 0, 0, 123, 32, 1, 0, 0, 0,
		124, 125, 5, 35, 0, 0, 125, 136, 3, 29, 14, 0, 126, 129, 3, 31, 15, 0,
		127, 128, 5, 47, 0, 0, 128, 130, 3, 29, 14, 0, 129, 127, 1, 0, 0, 0, 129,
		130, 1, 0, 0, 0, 130, 137, 1, 0, 0, 0, 131, 132, 5, 47, 0, 0, 132, 134,
		3, 29, 14, 0, 133, 135, 3, 31, 15, 0, 134, 133, 1, 0, 0, 0, 134, 135, 1,
		0, 0, 0, 135, 137, 1, 0, 0, 0, 136, 126, 1, 0, 0, 0, 136, 131, 1, 0, 0,
		0, 136, 137, 1, 0, 0, 0, 137, 34, 1, 0, 0, 0, 138, 140, 7, 3, 0, 0, 139,
		138, 1, 0, 0, 0, 140, 141, 1, 0, 0, 0, 141, 139, 1, 0, 0, 0, 141, 142,
		1, 0, 0, 0, 142, 36, 1, 0, 0, 0, 143, 145, 5, 45, 0, 0, 144, 143, 1, 0,
		0, 0, 144, 145, 1, 0, 0, 0, 145, 147, 1, 0, 0, 0, 146, 148, 7, 4, 0, 0,
		147, 146, 1, 0, 0, 0, 148, 149, 1, 0, 0, 0, 149, 147, 1, 0, 0, 0, 149,
		150, 1, 0, 0, 0, 150, 157, 1, 0, 0, 0, 151, 153, 5, 46, 0, 0, 152, 154,
		7, 4, 0, 0, 153, 152, 1, 0, 0, 0, 154, 155, 1, 0, 0, 0, 155, 153, 1, 0,
		0, 0, 155, 156, 1, 0, 0, 0, 156, 158, 1, 0, 0, 0, 157, 151, 1, 0, 0, 0,
		157, 158, 1, 0, 0, 0, 158, 168, 1, 0, 0, 0, 159, 161, 7, 5, 0, 0, 160,
		162, 7, 6, 0, 0, 161, 160, 1, 0, 0, 0, 161, 162, 1, 0, 0, 0, 162, 164,
		1, 0, 0, 0, 163, 165, 7, 4, 0, 0, 164, 163, 1, 0, 0, 0, 165, 166, 1, 0,
		0, 0, 166, 164, 1, 0, 0, 0, 166, 167, 1, 0, 0, 0, 167, 169, 1, 0, 0, 0,
		168, 159, 1, 0, 0, 0, 168, 169, 1, 0, 0, 0, 169, 38, 1, 0, 0, 0, 170, 172,
		5, 45, 0, 0, 171, 170, 1, 0, 0, 0, 171, 172, 1, 0, 0, 0, 172, 173, 1, 0,
		0, 0, 173, 174, 5, 48, 0, 0, 174, 176, 7, 7, 0, 0, 175, 177, 7, 8, 0, 0,
		176, 175, 1, 0, 0, 0, 177, 178, 1, 0, 0, 0, 178, 176, 1, 0, 0, 0, 178,
		179, 1, 0, 0, 0, 179, 40, 1, 0, 0, 0, 180, 186, 5, 34, 0, 0, 181, 185,
		8, 9, 0, 0, 182, 183, 5, 92, 0, 0, 183, 185, 9, 0, 0, 0, 184, 181, 1, 0,
		0, 0, 184, 182, 1, 0, 0, 0, 185, 188, 1, 0, 0, 0, 186, 184, 1, 0, 0, 0,
		186, 187, 1, 0, 0, 0, 187, 189, 1, 0, 0, 0, 188, 186, 1, 0, 0, 0, 189,
		190, 5, 34, 0, 0, 190, 42, 1, 0, 0, 0, 191, 193, 7, 10, 0, 0, 192, 194,
		7, 1, 0, 0, 193, 192, 1, 0, 0, 0, 194, 195, 1, 0, 0, 0, 195, 193, 1, 0,
		0, 0, 195, 196, 1, 0, 0, 0, 196, 44, 1, 0, 0, 0, 197, 201, 7, 11, 0, 0,
		198, 200, 7, 12, 0, 0, 199, 198, 1, 0, 0, 0, 200, 203, 1, 0, 0, 0, 201,
		199, 1, 0, 0, 0, 201, 202, 1, 0, 0, 0, 202, 46, 1, 0, 0, 0, 203, 201, 1,
		0, 0, 0, 204, 206, 7, 13, 0, 0, 205, 204, 1, 0, 0, 0, 206, 207, 1, 0, 0,
		0, 207, 205, 1, 0, 0, 0, 207, 208, 1, 0, 0, 0, 208, 209, 1, 0, 0, 0, 209,
		210, 6, 23, 0, 0, 210, 48, 1, 0, 0, 0, 211, 212, 5, 47, 0, 0, 212, 213,
		5, 42, 0, 0, 213, 217, 1, 0, 0, 0, 214, 216, 9, 0, 0, 0, 215, 214, 1, 0,
		0, 0, 216, 219, 1, 0, 0, 0, 217, 218, 1, 0, 0, 0, 217, 215, 1, 0, 0, 0,
		218, 220, 1, 0, 0, 0, 219, 217, 1, 0, 0, 0, 220, 221, 5, 42, 0, 0, 221,
		222, 5, 47, 0, 0, 222, 223, 1, 0, 0, 0, 223, 224, 6, 24, 0, 0, 224, 50,
		1, 0, 0, 0, 225, 226, 5, 47, 0, 0, 226, 227, 5, 47, 0, 0, 227, 231, 1,
		0, 0, 0, 228, 230, 8, 3, 0, 0, 229, 228, 1, 0, 0, 0, 230, 233, 1, 0, 0,
		0, 231, 229, 1, 0, 0, 0, 231, 232, 1, 0, 0, 0, 232, 234, 1, 0, 0, 0, 233,
		231, 1, 0, 0, 0, 234, 235, 6, 25, 0, 0, 235, 52, 1, 0, 0, 0, 23, 0, 113,
		118, 129, 134, 136, 141, 144, 149, 155, 157, 161, 166, 168, 171, 178, 184,
		186, 195, 201, 207, 217, 231, 1, 6, 0, 0,
	}
	deserializer := antlr.NewATNDeserializer(nil)
	staticData.atn = deserializer.Deserialize(staticData.serializedATN)
	atn := staticData.atn
	staticData.decisionToDFA = make([]*antlr.DFA, len(atn.DecisionToState))
	decisionToDFA := staticData.decisionToDFA
	for index, state := range atn.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(state, index)
	}
}

// NumbatLexerInit initializes any static state used to implement NumbatLexer. By default the
// static state used to implement the lexer is lazily initialized during the first call to
// NewNumbatLexer(). You can call this function if you wish to initialize the static state ahead
// of time.
func NumbatLexerInit() {
	staticData := &NumbatLexerLexerStaticData
	staticData.once.Do(numbatlexerLexerInit)
}

// NewNumbatLexer produces a new lexer instance for the optional input antlr.CharStream.
func NewNumbatLexer(input antlr.CharStream) *NumbatLexer {
	NumbatLexerInit()
	l := new(NumbatLexer)
	l.BaseLexer = antlr.NewBaseLexer(input)
	staticData := &NumbatLexerLexerStaticData
	l.Interpreter = antlr.NewLexerATNSimulator(l, staticData.atn, staticData.decisionToDFA, staticData.PredictionContextCache)
	l.channelNames = staticData.ChannelNames
	l.modeNames = staticData.ModeNames
	l.RuleNames = staticData.RuleNames
	l.LiteralNames = staticData.LiteralNames
	l.SymbolicNames = staticData.SymbolicNames
	l.GrammarFileName = "Numbat.g4"
	// TODO: l.EOF = antlr.TokenEOF

	return l
}

// NumbatLexer tokens.
const (
	NumbatLexerT__0          = 1
	NumbatLexerT__1          = 2
	NumbatLexerT__2          = 3
	NumbatLexerT__3          = 4
	NumbatLexerT__4          = 5
	NumbatLexerT__5          = 6
	NumbatLexerT__6          = 7
	NumbatLexerT__7          = 8
	NumbatLexerT__8          = 9
	NumbatLexerT__9          = 10
	NumbatLexerT__10         = 11
	NumbatLexerT__11         = 12
	NumbatLexerT__12         = 13
	NumbatLexerT__13         = 14
	NumbatLexerUNIT          = 15
	NumbatLexerNEWLINE       = 16
	NumbatLexerNUMBER        = 17
	NumbatLexerHEX           = 18
	NumbatLexerSTRING        = 19
	NumbatLexerTYPE_NAME     = 20
	NumbatLexerNON_TYPE_NAME = 21
	NumbatLexerWS            = 22
	NumbatLexerCOMMENT       = 23
	NumbatLexerLINE_COMMENT  = 24
)
